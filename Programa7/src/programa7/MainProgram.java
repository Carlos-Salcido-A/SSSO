
package programa7;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.TimerTask;
import javax.swing.Timer;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import java.util.Random;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JTextField;

public class MainProgram extends javax.swing.JFrame implements KeyListener {
    
    private Timer mTimer;
    private int contloc=0;//contador local
    private int contglobal=0;//contador local
    private int tiempo=0;
    private int temprest=0;
    private int it=0;
    private int iterator_tabla1=0;
    private int quantum=0;
    private DefaultTableModel model = new DefaultTableModel();
    private DefaultTableModel model2 = new DefaultTableModel();
    private DefaultTableModel model3 = new DefaultTableModel();
    private DefaultTableModel model4 = new DefaultTableModel();
    private DefaultTableModel model5 = new DefaultTableModel();
    ArrayList <Proceso> procesos;
    Proceso pr;
 
    
    public MainProgram(){
        
        procesos = new ArrayList<>();
        
        initComponents();
        mTimer = new Timer(1000, (ActionEvent e) -> {
                iniciarCronometro();  
            });
        
        addKeyListener(this);
        setFocusable(true);
        
        this.setVisible(true);
        jTabbedPane1.setEnabledAt(jTabbedPane1.indexOfComponent(panelIngresar), true);
        jTabbedPane1.setEnabledAt(jTabbedPane1.indexOfComponent(panelVisualizar), true);
        jTabbedPane1.setEnabledAt(jTabbedPane1.indexOfComponent(panelFinal), true);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelIngresar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAceptCant_InDt = new javax.swing.JButton();
        spinCantProc = new javax.swing.JSpinner();
        spinQuantum = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        panelVisualizar = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResultados = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLoteActual = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnComenzar = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtContGlobal = new javax.swing.JTextField();
        txtNuevosProc = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtTiempoTrans = new javax.swing.JTextField();
        txtTiempoRest = new javax.swing.JTextField();
        txtOperacionProc = new javax.swing.JTextField();
        txtIDProc = new javax.swing.JTextField();
        txtInstrucciones = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProcBloq = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        btnTablaTiempos = new javax.swing.JButton();
        txtQuantum = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        panelFinal = new javax.swing.JPanel();
        lblTituloResultados = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTiempoResultados = new javax.swing.JTable();
        txtInstrucciones2 = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblMemoria = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        txtInstrucciones3 = new javax.swing.JTextField();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        panelIngresar.setBackground(new java.awt.Color(0, 102, 204));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SIMULADOR DE PROCESOS");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Ingresa la cantidad de procesos:");

        btnAceptCant_InDt.setText("Aceptar");
        btnAceptCant_InDt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptCant_InDtActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Ingresa el QUANTUM:");

        javax.swing.GroupLayout panelIngresarLayout = new javax.swing.GroupLayout(panelIngresar);
        panelIngresar.setLayout(panelIngresarLayout);
        panelIngresarLayout.setHorizontalGroup(
            panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIngresarLayout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panelIngresarLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelIngresarLayout.createSequentialGroup()
                            .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAceptCant_InDt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(spinCantProc, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(576, Short.MAX_VALUE))
        );
        panelIngresarLayout.setVerticalGroup(
            panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIngresarLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel1)
                .addGap(76, 76, 76)
                .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinCantProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnAceptCant_InDt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(302, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Datos", panelIngresar);

        panelVisualizar.setBackground(new java.awt.Color(0, 102, 204));

        tblResultados.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        tblResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Operaci√≥n", "Resultado", "Lote"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblResultados);

        tblLoteActual.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        tblLoteActual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tiempo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblLoteActual);

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Procesos Terminados");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Contador Global");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Nuevos Procesos");

        btnComenzar.setText("Comenzar");
        btnComenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComenzarActionPerformed(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("ID");

        txtContGlobal.setText("0");
        txtContGlobal.setEnabled(false);

        txtNuevosProc.setText("0");
        txtNuevosProc.setEnabled(false);
        txtNuevosProc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNuevosProcActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Proceso en Ejecuci√≥n");

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Operaci√≥n");

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Tiempo Restante");

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Tiempo Transcurrido");

        txtTiempoTrans.setText("0");
        txtTiempoTrans.setEnabled(false);

        txtTiempoRest.setText("0");
        txtTiempoRest.setEnabled(false);
        txtTiempoRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTiempoRestActionPerformed(evt);
            }
        });

        txtOperacionProc.setEnabled(false);

        txtIDProc.setEnabled(false);

        txtInstrucciones.setBackground(new java.awt.Color(0, 102, 204));
        txtInstrucciones.setForeground(new java.awt.Color(0, 102, 204));
        txtInstrucciones.setBorder(null);
        txtInstrucciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInstruccionesActionPerformed(evt);
            }
        });

        tblProcBloq.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        tblProcBloq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "Tiempo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblProcBloq);

        jLabel17.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Listos");

        btnTablaTiempos.setText("Ver Tabla de Tiempos");
        btnTablaTiempos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablaTiemposActionPerformed(evt);
            }
        });

        txtQuantum.setText("0");
        txtQuantum.setEnabled(false);

        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Quantum:");

        jLabel21.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Bloqueados");

        javax.swing.GroupLayout panelVisualizarLayout = new javax.swing.GroupLayout(panelVisualizar);
        panelVisualizar.setLayout(panelVisualizarLayout);
        panelVisualizarLayout.setHorizontalGroup(
            panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVisualizarLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11))
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtNuevosProc, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(75, 75, 75))
                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelVisualizarLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(btnComenzar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                                        .addGap(72, 72, 72)
                                        .addComponent(txtInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                    .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jLabel17)
                                            .addGap(122, 122, 122))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(txtContGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(218, 218, 218)))
                                    .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jLabel14)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtIDProc, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel18)
                                                .addComponent(jLabel19))
                                            .addGap(85, 85, 85)
                                            .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtTiempoRest, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtTiempoTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jLabel20)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(1, 1, 1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtOperacionProc, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jLabel15)
                                            .addGap(23, 23, 23))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                    .addComponent(btnTablaTiempos)
                                    .addGap(51, 51, 51)
                                    .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                            .addComponent(jLabel21)
                                            .addGap(92, 92, 92))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelVisualizarLayout.setVerticalGroup(
            panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVisualizarLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNuevosProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelVisualizarLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(txtInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btnTablaTiempos, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(panelVisualizarLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtIDProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtOperacionProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTiempoTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTiempoRest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(btnComenzar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addComponent(jLabel21)
                                .addGap(39, 39, 39)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33))))
        );

        jTabbedPane1.addTab("Visualizar Datos", panelVisualizar);

        panelFinal.setBackground(new java.awt.Color(0, 102, 204));

        lblTituloResultados.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        lblTituloResultados.setForeground(new java.awt.Color(255, 255, 255));
        lblTituloResultados.setText("Resultados de los Procesos");

        tblTiempoResultados.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        tblTiempoResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblTiempoResultados);

        txtInstrucciones2.setBackground(new java.awt.Color(0, 102, 204));
        txtInstrucciones2.setForeground(new java.awt.Color(0, 102, 204));
        txtInstrucciones2.setBorder(null);

        javax.swing.GroupLayout panelFinalLayout = new javax.swing.GroupLayout(panelFinal);
        panelFinal.setLayout(panelFinalLayout);
        panelFinalLayout.setHorizontalGroup(
            panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFinalLayout.createSequentialGroup()
                .addGroup(panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFinalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4))
                    .addGroup(panelFinalLayout.createSequentialGroup()
                        .addGap(416, 416, 416)
                        .addComponent(lblTituloResultados)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(panelFinalLayout.createSequentialGroup()
                .addGap(412, 412, 412)
                .addComponent(txtInstrucciones2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(498, Short.MAX_VALUE))
        );
        panelFinalLayout.setVerticalGroup(
            panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFinalLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTituloResultados)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(txtInstrucciones2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tabla Procesos", panelFinal);

        jTabbedPane2.setBackground(new java.awt.Color(0, 102, 204));
        jTabbedPane2.setForeground(new java.awt.Color(0, 102, 204));
        jTabbedPane1.addTab("a", jTabbedPane2);

        jPanel2.setBackground(new java.awt.Color(0, 102, 204));

        tblMemoria.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        tblMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Operaci√≥n", "Resultado", "Lote"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblMemoria);

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Memoria");

        txtInstrucciones3.setBackground(new java.awt.Color(0, 102, 204));
        txtInstrucciones3.setForeground(new java.awt.Color(0, 102, 204));
        txtInstrucciones3.setBorder(null);
        txtInstrucciones3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInstrucciones3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(510, 510, 510)
                        .addComponent(jLabel13))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(431, 431, 431)
                        .addComponent(txtInstrucciones3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(307, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtInstrucciones3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tabla Memoria", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTablaTiemposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTablaTiemposActionPerformed
        jTabbedPane1.setSelectedIndex(2);
        //LLENAR LA TABLA 4
        while(tblTiempoResultados.getRowCount()>0){
            model4.removeRow(0);
        }
        for(int i=0; i<procesos.size(); i++){
            System.out.println("LLENANDO LA TABLA");
            int j= Integer.parseInt((String) tblResultados.getModel().getValueAt(i, 0));
            Object[] ob = new Object[10];
            ob[0]= procesos.get(j).ImprimirId();
            ob[1]= procesos.get(j).ImprimirNum1()+procesos.get(j).ImprimirOperacion()+procesos.get(j).ImprimirNum2();
            ob[2]= procesos.get(j).resultado;
            ob[3]= procesos.get(j).tllegada;
            ob[4]= procesos.get(j).tfinalizacion;
            ob[5]= procesos.get(j).tretorno;
            ob[6]= procesos.get(j).trespuesta;
            ob[7]= procesos.get(j).tespera;
            ob[8]= procesos.get(j).tservicio;
            ob[9]= "FINALIZADO";
            model4.addRow(ob);
            tblTiempoResultados.setModel(model4);
        }
        tblTiempoResultados.setModel(model4);
    }//GEN-LAST:event_btnTablaTiemposActionPerformed

    private void txtInstruccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInstruccionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInstruccionesActionPerformed

    private void txtTiempoRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTiempoRestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTiempoRestActionPerformed

    private void txtNuevosProcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNuevosProcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNuevosProcActionPerformed

    private void btnComenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComenzarActionPerformed

        System.out.println("num procesos: "+procesos.size());

        //DECLARAR LA TABLA 1
        model.addColumn("ID");
        model.addColumn("Tiempo");
        model.addColumn("T Transc");

        //DECLARAR LA TABLA 2
        model2.addColumn("ID");
        model2.addColumn("Operaci√≥n");
        model2.addColumn("Resultado");

        //DECLARAR LA TABLA 3
        model3.addColumn("ID");
        model3.addColumn("Tiempo Bloqueado");
        tblProcBloq.setModel(model3);

        //DECLARAR LA TABLA 4
        model4.addColumn("ID");
        model4.addColumn("Operaci√≥n");
        model4.addColumn("Resultado");
        model4.addColumn("T. Llegada");
        model4.addColumn("T. Finalizaci√≥n");
        model4.addColumn("T. Retorno");
        model4.addColumn("T. Respuesta");
        model4.addColumn("T. Espera");
        model4.addColumn("T. Servicio");
        model4.addColumn("ESTADO");
        tblTiempoResultados.setModel(model4);

        //DECLARAR LA TABLA 5
        model5.addColumn("No.Marco");
        model5.addColumn("Espacio");
        model5.addColumn("Estado");
        model5.addColumn("Proceso");
        int j=0;
        Object[] ob = new Object[4];
        ob[0]= "0";
        ob[1]= "0/5";
        ob[2]="S.O.";
        ob[3]="...";
        model5.addRow(ob);
        ob[0]= "1";
        ob[1]= "0/5";
        ob[2]="S.O.";
        ob[3]="...";
        model5.addRow(ob);

        for(int i=2; i<36;i++){
            if(j<procesos.size()){
                int aux1 =(procesos.get(j).getTam());
                aux1 = (aux1/5)+1;
                int aux2= procesos.get(j).getTam();
                while(aux1!=0){
                    if((aux2-5)< 0){
                        ob[0]= i;
                        ob[1]= (aux2)+"/5";
                        ob[2]= "listo";
                        ob[3]= j;
                        model5.addRow(ob);
                        aux1--;
                        j++;
                        //i++;
                    }
                    else{
                        ob[0]= i;
                        ob[1]= "5/5";
                        ob[2]= "listo";
                        ob[3]= j;
                        model5.addRow(ob);
                        aux1--;
                        i++;
                        aux2=aux2-5;
                        if(aux2==0){
                            j++;
                        }

                    }
                }
            }
            else{
                ob[0]= i;
                ob[1]= "0/5";
                ob[2]="libre";
                ob[3]="...";
                model5.addRow(ob);
            }
        }
        tblMemoria.setModel(model5);

        //crear variable de tiempo
        for(int i = 0; i<procesos.size(); i++){
            tiempo = tiempo + procesos.get(i).getTiempo();
        }
        System.out.println("tiempo total: "+tiempo);
        mTimer.start();//INICIA EL CRONOMETRO

    }//GEN-LAST:event_btnComenzarActionPerformed

    private void btnAceptCant_InDtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptCant_InDtActionPerformed
        String value_spin = spinCantProc.getValue().toString();
        String value_spin2 = spinQuantum.getValue().toString();
        Random dado = new Random();
        int num_aleat,num_aleat2;
        String operacion="";
        int num1=0, num2=0, time=0;
        if(Integer.parseInt(value_spin) > 0 && Integer.parseInt(value_spin2) > 0){
            spinCantProc.setEnabled(false);
            spinQuantum.setEnabled(false);
            quantum=Integer.parseInt(value_spin2);
            System.out.println("Quantum: "+quantum);
            int total= Integer.parseInt(value_spin);

            for(int i=0; i<total;i++){
                num1= dado.nextInt(16);
                num2= dado.nextInt(16);
                time=dado.nextInt(10-5+1)+7;
                num_aleat = dado.nextInt(5);//NUMERO ALEATORIO PARA HACER UNA OPERACION ALEATORIA
                num_aleat2=dado.nextInt(10) + 1;
                if(num_aleat2==5){
                    num_aleat2=4;
                }
                switch(num_aleat){
                    case 0:operacion="+";
                    break;
                    case 1:operacion="-";
                    break;
                    case 2:operacion="*";
                    break;
                    case 3:operacion="/";
                    num2++;
                    break;
                    case 4:operacion="residuo";
                    num2++;
                    break;
                }

                String id = String.valueOf(i);
                //int ttrans=0;
                procesos.add(new Proceso("", num1, operacion, num2, id, time,0,0,0,0,0,0,0," ",num_aleat2));
                System.out.println(procesos.get(i).ImprimirId()+" Operacion: "+procesos.get(i).ImprimirNum1()+procesos.get(i).ImprimirOperacion()+
                    procesos.get(i).ImprimirNum2()+" Tiempo: "+procesos.get(i).ImprimirTiempo()+"Ttranscurrido: "+procesos.get(i).getTtrans()
                    +"Tllegada: "+procesos.get(i).getTtrans()+"Tfinalizacion: "+procesos.get(i).getTtrans()+"Tretorno: "+procesos.get(i).getTtrans()
                    +"Trespuesta: "+procesos.get(i).getTtrans()+"Tespera: "+procesos.get(i).getTtrans()+"Tservicio: "+procesos.get(i).getTtrans()
                    +"Tama√±o: "+ procesos.get(i).getTam());
            }

            jTabbedPane1.setSelectedIndex(1);
        }
        else{
            JOptionPane.showMessageDialog(null, "El n√∫mero debe ser mayor a cero");
        }
    }//GEN-LAST:event_btnAceptCant_InDtActionPerformed

    private void txtInstrucciones3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInstrucciones3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInstrucciones3ActionPerformed

    ////////////////////EVENTOS DE TECLADO GLOBAL////////////////////
    public void keyPressed(KeyEvent e){
        System.out.println("Tecla: "+ e.getKeyChar()+"\n");
        char letra = e.getKeyChar();
        /*if(letra=='p'){
            System.out.println(e.getKeyChar()+" de Par√≠s\n");
            mTimer.stop();
        }
        if(letra=='c'){
            System.out.println(e.getKeyChar()+" de C√≥rdoba\n");
            mTimer.start();
        }
        if(letra=='i'){
            System.out.println(e.getKeyChar()+" de Italia\n");
        }
        if(letra=='e'){
            System.out.println(e.getKeyChar()+" de Espa√±a\n");
        }*/
    }
    public void keyTyped(KeyEvent arg0) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    public void keyReleased(KeyEvent arg0) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    
    
    ////////////////////.////////////////////.////////////////////
    ////////////////////////////////////////AQUI OCURRE TODO////////////////////////////////////////
    ////////////////////.////////////////////.////////////////////
    private void iniciarCronometro(){//CICLO FOR DE CADA SEGUNDO
        if(model.getRowCount()!=0){
            it= Integer.parseInt((String) tblLoteActual.getModel().getValueAt(0, 0));
        }
        
        
        //ESCUCHAR TECLADO
        KeyListener escucharTeclado= new KeyListener() {
            @Override
            public void keyTyped(KeyEvent arg0) {
                ;
            }
            @Override
            public void keyPressed(KeyEvent e) {
                System.out.println("Tecla: "+ e.getKeyChar()+"\n");
                
                char letra = e.getKeyChar();
                if(letra=='p'){
                    //txtInstrucciones.setText("");
                    System.out.println(e.getKeyChar()+" de Pausa\n");
                    mTimer.stop();
                }
                if(letra=='c'){
                    System.out.println(e.getKeyChar()+" de Continuar\n");
                    //txtInstrucciones.setText("");
                    jTabbedPane1.setSelectedIndex(1);
                    mTimer.start();
                }
                /*if(letra=='i'){
                    System.out.println(e.getKeyChar()+" de Interrupci√≥n\n");
                }
                if(letra=='e'){
                    System.out.println(e.getKeyChar()+" de Error\n");
                    String operacion= String.valueOf(procesos.get(it).ImprimirNum1()) + String.valueOf(procesos.get(it).ImprimirOperacion())
                            + String.valueOf(procesos.get(it).ImprimirNum2());
                    Object[] ob2 = new Object[4];
                    ob2[0]= procesos.get(it).ImprimirId();
                    ob2[1]= operacion;
                    ob2[2]= "ERROR";
                    ob2[3]= String.valueOf((it/3)+1);
                    model2.addRow(ob2);
                    tblResultados.setModel(model2);//AGREGAR PROCESO TERMINADO
                    model.removeRow(0);//ELIMINAR OBJETO QUE DIO ERROR
                    it++;
                    //txtInstrucciones.cut();
                }*/
            }
            @Override
            public void keyReleased(KeyEvent arg0) {
                ;
            }
        };
        if(txtInstrucciones.getText().equals("e")){//ACABAR PROCESO POR ERROR
            String operacion= String.valueOf(procesos.get(it).ImprimirNum1()) + String.valueOf(procesos.get(it).ImprimirOperacion())
                            + String.valueOf(procesos.get(it).ImprimirNum2());
            procesos.get(it).setResultado("ERROR");
            Object[] ob2 = new Object[4];
            ob2[0]= procesos.get(it).ImprimirId();
            ob2[1]= operacion;
            ob2[2]= "ERROR";
            model2.addRow(ob2);
            tblResultados.setModel(model2);//AGREGAR PROCESO TERMINADO
            model.removeRow(0);//ELIMINAR OBJETO QUE DIO ERROR
            //TIEMPO TRANSCURRIDO    
            procesos.get(it).setTtrans(contloc);
            txtTiempoTrans.setText(String.valueOf(procesos.get(it).getTtrans()));
            //TIEMPO RESTANTE
            temprest = procesos.get(it).tiempo - procesos.get(it).getTtrans();
            txtTiempoRest.setText(String.valueOf(temprest));
            //TIEMPO FINALIZACION
            procesos.get(it).setTfinalizacion(contglobal);
            //TIEMPO RETORNO
            procesos.get(it).setTretorno(procesos.get(it).getTfinalizacion()-procesos.get(it).getTllegada());
            //TIEMPO RESPUESTA
            procesos.get(it).setTrespuesta(contglobal-procesos.get(it).tiempo);
            //TIEMPO ESPERA
            procesos.get(it).setTespera(contglobal-procesos.get(it).tiempo);
            //TIEMPO SERVICIO
            procesos.get(it).setTservicio(procesos.get(it).tiempo);
            if(model.getRowCount()!=0){
                it= Integer.parseInt((String) tblLoteActual.getModel().getValueAt(0, 0));
            }
            contloc=0;
            txtInstrucciones.setText("");
        }
        if(txtInstrucciones.getText().equals("i")){//INTERRUPCI√ìN
            if(model.getRowCount()==0){;}else{
                System.out.println("INTERRPUCI√ìN!!!");
                Object[] ob3 = new Object[2];
                ob3[0]= procesos.get(it).ImprimirId();
                ob3[1]= "0";
                model3.addRow(ob3);
                tblProcBloq.setModel(model3);
                model.removeRow(0);
                
                
                if(model.getRowCount()!=0){
                    it= Integer.parseInt((String) tblLoteActual.getModel().getValueAt(0, 0));
                }
                
                
                txtInstrucciones.setText("");
            }
            contloc=0;
        }
        if(txtInstrucciones.getText().equals("n")){//NUEVO PROCESO
            Random dado = new Random();
            int i= procesos.size();
            System.out.println("i es igual a: "+i);
            int num_aleat, num_aleat2;
            String operacion="";
            int num1=0, num2=0, time=0;
            num1= dado.nextInt(16);
            num2= dado.nextInt(16);
            time=dado.nextInt(10-5+1)+7;
            num_aleat = dado.nextInt(5);//NUMERO ALEATORIO PARA HACER UNA OPERACION ALEATORIA
            num_aleat2=dado.nextInt(10)+1;
            switch(num_aleat){
                case 0:operacion="+";
                    break;
                case 1:operacion="-";
                    break;
                case 2:operacion="*";
                    break;
                case 3:operacion="/";
                    num2++;
                    break;
                case 4:operacion="residuo";
                    num2++;
                    break;
            }
            String id = String.valueOf(i);
            procesos.add(new Proceso("", num1, operacion, num2, id, time,0,0,0,0,0,0,0," ",num_aleat2));
            System.out.println("PROCESO AGREGADO: ");
            System.out.println(procesos.get(i).ImprimirId()+" Operacion: "+procesos.get(i).ImprimirNum1()+procesos.get(i).ImprimirOperacion()+
                    procesos.get(i).ImprimirNum2()+" Tiempo: "+procesos.get(i).ImprimirTiempo()+"Ttranscurrido: "+procesos.get(i).getTtrans()
                    +"Tllegada: "+procesos.get(i).getTtrans()+"Tfinalizacion: "+procesos.get(i).getTtrans()+"Tretorno: "+procesos.get(i).getTtrans()
                    +"Trespuesta: "+procesos.get(i).getTtrans()+"Tespera: "+procesos.get(i).getTtrans()+"Tservicio: "+procesos.get(i).getTtrans());
            txtInstrucciones.setText("");
        }
        if(txtInstrucciones.getText().equals("t")){//TABLA DE PROCESOS
            jTabbedPane1.setSelectedIndex(2);
            txtInstrucciones.setText("");
            mTimer.stop();
            String estado="";
            int k=0;
            while(tblTiempoResultados.getRowCount()>0){
                model4.removeRow(0);
            }
            for(int i=0; i<procesos.size(); i++){
                int band=0;
                System.out.println("LLENANDO LA TABLA TEMPORAL");
                for(int j=0;j<tblLoteActual.getRowCount();j++){
                    k =Integer.parseInt((String) tblLoteActual.getModel().getValueAt(j, 0));
                    if(i==k){estado="EJECUCI√ìN";band++;}
                }
                for(int j=0;j<tblProcBloq.getRowCount();j++){
                    k =Integer.parseInt((String) tblProcBloq.getModel().getValueAt(j, 0));
                    if(i==k){estado="BLOQUEADO";band++;}
                }
                for(int j=0;j<tblResultados.getRowCount();j++){
                    System.out.println("OWO"+tblResultados.getRowCount());
                    k =Integer.parseInt((String) tblResultados.getModel().getValueAt(j, 0));
                    if(i==k){estado="FINALIZADO";band++;}
                }
                if(band==0){estado="NUEVO";}
                Object[] ob = new Object[10];
                ob[0]= procesos.get(i).ImprimirId();
                ob[1]= procesos.get(i).ImprimirNum1()+procesos.get(i).ImprimirOperacion()+procesos.get(i).ImprimirNum2();
                ob[2]= procesos.get(i).resultado;
                ob[3]= procesos.get(i).tllegada;
                ob[4]= procesos.get(i).tfinalizacion;
                ob[5]= procesos.get(i).tretorno;
                ob[6]= procesos.get(i).trespuesta;
                ob[7]= procesos.get(i).tespera;
                ob[8]= procesos.get(i).tservicio;
                ob[9]= estado;
                model4.addRow(ob);
                tblTiempoResultados.setModel(model4);
            }
        tblTiempoResultados.setModel(model4);
            
        }
        if(txtInstrucciones.getText().equals("m")){//TABLA DE MEMORIA
            jTabbedPane1.setSelectedIndex(4);
            txtInstrucciones.setText("");
            mTimer.stop();
        }
        
        
        txtInstrucciones.addKeyListener(escucharTeclado);
        txtInstrucciones2.addKeyListener(escucharTeclado);
        txtInstrucciones3.addKeyListener(escucharTeclado);
        //CONTADOR DE SEGUNDOS DE CADA PROCESO
        System.out.println("Cronometro " + contloc);
        
        //CONTADOR DEL QUANTUM
        txtQuantum.setText(String.valueOf(quantum-contloc));
        
        //CONDICIONAL SE ACAB√ì EL QUANTUM
        if((quantum-contloc)==0){
            contloc=0;
            System.out.println("QUANTUM==0!!!");
            Object[] ob = new Object[3];
            ob[0]= procesos.get(it).ImprimirId();
            ob[1]= procesos.get(it).ImprimirTiempo();
            ob[2]= procesos.get(it).ImprimirTtrans();
            model.addRow(ob);
            model.removeRow(0);
            it= Integer.parseInt((String) tblLoteActual.getModel().getValueAt(0, 0));
                
        }
        
        //PROCESOS EN TABLA
        int procnew = (procesos.size() - (model.getRowCount()+model2.getRowCount()+model3.getRowCount()));
        txtNuevosProc.setText(String.valueOf(procnew));
        //PROCESOS BLOQUEADOS
        
        if(model3.getRowCount()==0){;}else{
           System.out.println(tblProcBloq.getModel().getValueAt(0, 1));
            if(tblProcBloq.getModel().getValueAt(0, 1).equals("10")){
                it= Integer.parseInt((String) tblProcBloq.getModel().getValueAt(0, 0));
                model.addRow(new Object[]{procesos.get(it).ImprimirId(), procesos.get(it).ImprimirTiempo(), procesos.get(it).ImprimirTtrans()});
                it= Integer.parseInt((String) tblLoteActual.getModel().getValueAt(0, 0));
                model3.removeRow(0);
                iterator_tabla1--;
        }}
        
        //LLENAR TABLA1
        while(model.getRowCount()<3){
            System.out.println("RowCount"+model.getRowCount());
            if(iterator_tabla1>=procesos.size()){
                System.out.println("BREAK");
                break;
            }
            int band=0;
            if(model.getRowCount()!=0){
                for(int i=0;i<model.getRowCount();i++){
                    if(iterator_tabla1==Integer.parseInt((String) model.getValueAt(i, 0))){
                        band++;                }
            }}
            if(band>0){
                break;
            }
            int band2=0;
            if(model2.getRowCount()!=0){
                for(int i=0;i<model2.getRowCount();i++){
                    if(iterator_tabla1==Integer.parseInt((String) model2.getValueAt(i, 0))){
                        band2++;                }
            }}
            if(band2>0){
                break;
            }
            System.out.println(model.getRowCount()+" : "+iterator_tabla1);
            model.addRow(new Object[]{procesos.get(iterator_tabla1).ImprimirId(), procesos.get(iterator_tabla1).ImprimirTiempo(), procesos.get(iterator_tabla1).ImprimirTtrans()});
            iterator_tabla1++;
            tblLoteActual.setModel(model);
        }
        
        
        
        //PONER DATOS DE LA OPERACION ACTUAL
        txtIDProc.setText(procesos.get(it).ImprimirId());
        //txtNombreProc.setText(procesos.get(it).ImprimirNombre());
        String operacion = String.valueOf(procesos.get(it).ImprimirNum1()) + procesos.get(it).ImprimirOperacion()
                    + String.valueOf(procesos.get(it).ImprimirNum2());
        txtOperacionProc.setText(operacion);
        
            
        //TABLA DE RESULTADOS
        double resultado=0;
        if(String.valueOf(procesos.get(it).getTiempo()-1).equals(txtTiempoTrans.getText())){
            if(procesos.get(it).operacion.equals("+")){
                resultado = procesos.get(it).getNumero1() + procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("-")){
                resultado = procesos.get(it).getNumero1() - procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("/")){
                resultado = procesos.get(it).getNumero1() / procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("*")){
                resultado = procesos.get(it).getNumero1() * procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("potencia")){
                resultado = Math.pow(procesos.get(it).getNumero1(), procesos.get(it).getNumero2());
            }
            else if(procesos.get(it).operacion.equals("residuo")){
                resultado = procesos.get(it).getNumero1() % procesos.get(it).getNumero2();
            }
            procesos.get(it).setResultado(String.valueOf(resultado));
            Object[] ob2 = new Object[4];
            ob2[0]= procesos.get(it).ImprimirId();
            ob2[1]= operacion;
            ob2[2]= String.valueOf(resultado);
            //ob2[3]= String.valueOf((it/3)+1);//ESTO ES EL LOTE
            model2.addRow(ob2);
            tblResultados.setModel(model2);
        }
        
        
        
        
        //TIEMPO LLEGADA
        if(procesos.get(it).getTtrans()==0){
            procesos.get(it).setTllegada(contglobal);
        }
        //TIEMPO TRANSCURRIDO    
        contloc = contloc + 1;
        procesos.get(it).setTtrans(procesos.get(it).getTtrans()+1);
        //procesos.get(it).ttrans=contloc;
        //System.out.println("Tiempo Transcurrido: " + procesos.get(it).getTtrans());
        txtTiempoTrans.setText(String.valueOf(procesos.get(it).getTtrans()));
        //TIEMPO RESTANTE
        temprest = procesos.get(it).getTiempo() - procesos.get(it).ttrans;
        //procesos.get(it).t
        txtTiempoRest.setText(String.valueOf(temprest));
        //Contador Global
        contglobal = contglobal + 1;
        txtContGlobal.setText(String.valueOf(contglobal));
        //CONTADOR PROCESOS BLOQUEADOS
        int filas =model3.getRowCount();
        if(filas==0){
            ;
        }
        else{
            for(int i=0; i<filas;i++){
                int value= Integer.parseInt((String) tblProcBloq.getModel().getValueAt(i, 1));
                System.out.println("Value: "+value);
                value++;
                tblProcBloq.getModel().setValueAt(String.valueOf(value), i, 1);
            }
        }
        
        
        
        
        //EL PROCESO TERMIN√ì
        if(temprest==0){
            //TIEMPO FINALIZACION
            procesos.get(it).setTfinalizacion(contglobal);
            //TIEMPO RETORNO
            procesos.get(it).setTretorno(procesos.get(it).getTfinalizacion()-procesos.get(it).getTllegada());
            //TIEMPO RESPUESTA
            procesos.get(it).setTrespuesta(contglobal-procesos.get(it).tiempo);
            //TIEMPO ESPERA
            procesos.get(it).setTespera(contglobal-procesos.get(it).getTiempo());
            //TIEMPO SERVICIO
            procesos.get(it).setTservicio(procesos.get(it).getTiempo());

            //////SIGUIENTE PROCESO
            
            model.removeRow(0);//eliminar el objeto terminado de la tabla
            //it=it+1;
            txtTiempoTrans.setText(String.valueOf(procesos.get(it).ImprimirTtrans()));
            txtTiempoRest.setText(String.valueOf(procesos.get(it).ImprimirTiempo()));
            contloc=0;
        }
        
        if(model2.getRowCount() == procesos.size()){//FIN DEL PROGRAMA
            mTimer.stop();//PARA EL CRONOMETRO
        }
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainProgram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptCant_InDt;
    private javax.swing.JButton btnComenzar;
    private javax.swing.JButton btnTablaTiempos;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblTituloResultados;
    private javax.swing.JPanel panelFinal;
    private javax.swing.JPanel panelIngresar;
    private javax.swing.JPanel panelVisualizar;
    private javax.swing.JSpinner spinCantProc;
    private javax.swing.JSpinner spinQuantum;
    private javax.swing.JTable tblLoteActual;
    private javax.swing.JTable tblMemoria;
    private javax.swing.JTable tblProcBloq;
    private javax.swing.JTable tblResultados;
    private javax.swing.JTable tblTiempoResultados;
    private javax.swing.JTextField txtContGlobal;
    private javax.swing.JTextField txtIDProc;
    private javax.swing.JTextField txtInstrucciones;
    private javax.swing.JTextField txtInstrucciones2;
    private javax.swing.JTextField txtInstrucciones3;
    private javax.swing.JTextField txtNuevosProc;
    private javax.swing.JTextField txtOperacionProc;
    private javax.swing.JTextField txtQuantum;
    private javax.swing.JTextField txtTiempoRest;
    private javax.swing.JTextField txtTiempoTrans;
    // End of variables declaration//GEN-END:variables


}
