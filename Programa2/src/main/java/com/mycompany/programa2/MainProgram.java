
package com.mycompany.programa2;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.TimerTask;
import javax.swing.Timer;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import java.util.Random;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JTextField;

public class MainProgram extends javax.swing.JFrame implements KeyListener {
    
    private Timer mTimer;
    private int contloc=0;//contador local
    private int contglobal=0;//contador local
    private int tiempo=0;
    private int temprest=0;
    private int it=0;
    private DefaultTableModel model = new DefaultTableModel();
    private DefaultTableModel model2 = new DefaultTableModel();
    ArrayList <Proceso> procesos;
    Proceso pr;
    
    public MainProgram(){
        
        procesos = new ArrayList<>();
        
        initComponents();
        mTimer = new Timer(1000, (ActionEvent e) -> {
                iniciarCronometro();  
            });
        
        addKeyListener(this);
        setFocusable(true);
        
        this.setVisible(true);
        jTabbedPane1.setEnabledAt(jTabbedPane1.indexOfComponent(panelIngresar), true);
        jTabbedPane1.setEnabledAt(jTabbedPane1.indexOfComponent(panelVisualizar), true);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelIngresar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAceptCant_InDt = new javax.swing.JButton();
        spinCantProc = new javax.swing.JSpinner();
        panelVisualizar = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResultados = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLoteActual = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnComenzar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtContGlobal = new javax.swing.JTextField();
        txtLotesRest = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtTiempoTrans = new javax.swing.JTextField();
        txtTiempoRest = new javax.swing.JTextField();
        txtOperacionProc = new javax.swing.JTextField();
        txtIDProc = new javax.swing.JTextField();
        txtInstrucciones = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        panelIngresar.setBackground(new java.awt.Color(0, 102, 204));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SIMULAR PROCESAMIENTO POR LOTES");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Ingresa la cantidad de procesos:");

        btnAceptCant_InDt.setText("Aceptar");
        btnAceptCant_InDt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptCant_InDtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelIngresarLayout = new javax.swing.GroupLayout(panelIngresar);
        panelIngresar.setLayout(panelIngresarLayout);
        panelIngresarLayout.setHorizontalGroup(
            panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIngresarLayout.createSequentialGroup()
                .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelIngresarLayout.createSequentialGroup()
                        .addGap(330, 330, 330)
                        .addComponent(btnAceptCant_InDt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelIngresarLayout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(panelIngresarLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(spinCantProc, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        panelIngresarLayout.setVerticalGroup(
            panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIngresarLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(169, 169, 169)
                .addGroup(panelIngresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinCantProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(39, 39, 39)
                .addComponent(btnAceptCant_InDt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Datos", panelIngresar);

        panelVisualizar.setBackground(new java.awt.Color(0, 102, 204));

        tblResultados.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tblResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Operación", "Resultado", "Lote"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblResultados);

        tblLoteActual.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tblLoteActual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "Tiempo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblLoteActual);

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Procesos Terminados");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Contador Global");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Lotes Restantes");

        btnComenzar.setText("Comenzar");
        btnComenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComenzarActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Lote Actual");

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("ID");

        txtContGlobal.setText("0");
        txtContGlobal.setEnabled(false);

        txtLotesRest.setText("0");
        txtLotesRest.setEnabled(false);
        txtLotesRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLotesRestActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Proceso en Ejecución");

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Operación");

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Tiempo Restante");

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Tiempo Transcurrido");

        txtTiempoTrans.setText("0");
        txtTiempoTrans.setEnabled(false);

        txtTiempoRest.setText("0");
        txtTiempoRest.setEnabled(false);
        txtTiempoRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTiempoRestActionPerformed(evt);
            }
        });

        txtOperacionProc.setEnabled(false);

        txtIDProc.setEnabled(false);

        txtInstrucciones.setBackground(new java.awt.Color(0, 102, 204));
        txtInstrucciones.setForeground(new java.awt.Color(0, 102, 204));
        txtInstrucciones.setBorder(null);

        javax.swing.GroupLayout panelVisualizarLayout = new javax.swing.GroupLayout(panelVisualizar);
        panelVisualizar.setLayout(panelVisualizarLayout);
        panelVisualizarLayout.setHorizontalGroup(
            panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVisualizarLayout.createSequentialGroup()
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVisualizarLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelVisualizarLayout.createSequentialGroup()
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                                        .addGap(68, 68, 68)
                                        .addComponent(txtInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(27, 27, 27)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel16))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtOperacionProc, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                            .addComponent(txtIDProc))
                                        .addGap(21, 21, 21))
                                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(panelVisualizarLayout.createSequentialGroup()
                                                    .addComponent(jLabel18)
                                                    .addGap(33, 33, 33)
                                                    .addComponent(txtTiempoRest, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(panelVisualizarLayout.createSequentialGroup()
                                                    .addComponent(jLabel19)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtTiempoTrans)))
                                            .addComponent(btnComenzar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 79, Short.MAX_VALUE))))
                            .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVisualizarLayout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtContGlobal))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVisualizarLayout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtLotesRest, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addGap(83, 83, 83)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(75, 75, 75))
        );
        panelVisualizarLayout.setVerticalGroup(
            panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVisualizarLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLotesRest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(panelVisualizarLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelVisualizarLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50))
                            .addGroup(panelVisualizarLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtIDProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOperacionProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTiempoRest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTiempoTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(panelVisualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnComenzar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))))
        );

        jTabbedPane1.addTab("Visualizar Datos", panelVisualizar);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptCant_InDtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptCant_InDtActionPerformed
        String value_spin = spinCantProc.getValue().toString();
        Random dado = new Random();
        int num_aleat;
        String operacion="";
        int num1=0, num2=0, time=0;
        if(Integer.parseInt(value_spin) > 0){
            spinCantProc.setEnabled(false);
            int total= Integer.parseInt(value_spin);
            
            for(int i=0; i<total;i++){
                num1= dado.nextInt(16);
                num2= dado.nextInt(16);
                time=dado.nextInt(18-7+1)+7;
                num_aleat = dado.nextInt(5);//NUMERO ALEATORIO PARA HACER UNA OPERACION ALEATORIA
                switch(num_aleat){
                    case 0:operacion="+";
                        break;
                    case 1:operacion="-";
                        break;
                    case 2:operacion="*";
                        break;
                    case 3:operacion="/";
                            num2++;
                        break;
                    case 4:operacion="residuo";
                            num2++;
                        break;
                }
                
                
                String id = String.valueOf(i);
                int ttrans=0;
                procesos.add(new Proceso("", num1, operacion, num2, id, time,ttrans));
                System.out.println(procesos.get(i).ImprimirId()+" Operacion: "+procesos.get(i).ImprimirNum1()+procesos.get(i).ImprimirOperacion()+
                        procesos.get(i).ImprimirNum2()+" Tiempo: "+procesos.get(i).ImprimirTiempo()+"Ttranscurrido: "+procesos.get(i).getTtrans());
            }
            
            jTabbedPane1.setSelectedIndex(1);
        }
        else{
            JOptionPane.showMessageDialog(null, "El número debe ser mayor a cero");
        }
    }//GEN-LAST:event_btnAceptCant_InDtActionPerformed

    private void txtTiempoRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTiempoRestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTiempoRestActionPerformed

    private void btnComenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComenzarActionPerformed

        System.out.println("num procesos: "+procesos.size());
        
        //DECLARAR LA TABLA 1
        model.addColumn("ID");
        model.addColumn("Tiempo");
        model.addColumn("T Transc");

        //DECLARAR LA TABLA 2
        model2.addColumn("ID");
        model2.addColumn("Operación");
        model2.addColumn("Resultado");
        model2.addColumn("Lote");
        int temp=0;
        
        //crear variable de tiempo
        for(int i = 0; i<procesos.size(); i++){
            tiempo = tiempo + procesos.get(i).getTiempo();
        }
        System.out.println("tiempo total: "+tiempo);
        mTimer.start();//INICIA EL CRONOMETRO
        
        
    }//GEN-LAST:event_btnComenzarActionPerformed

    //EVENTOS DE TECLADO
    public void keyPressed(KeyEvent e){
        System.out.println("Tecla: "+ e.getKeyChar()+"\n");
        char letra = e.getKeyChar();
        if(letra=='p'){
            System.out.println(e.getKeyChar()+" de París\n");
            mTimer.stop();
        }
        if(letra=='c'){
            System.out.println(e.getKeyChar()+" de Córdoba\n");
            mTimer.start();
        }
        if(letra=='i'){
            System.out.println(e.getKeyChar()+" de Italia\n");
        }
        if(letra=='e'){
            System.out.println(e.getKeyChar()+" de España\n");
        }
    }
    public void keyTyped(KeyEvent arg0) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    public void keyReleased(KeyEvent arg0) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    
    private void iniciarCronometro(){
        //JTextField txtInstrucciones = new JTextField();
        //txtInstrucciones.setBounds(40,200,200,40);
        //txtInstrucciones.setText("");
        KeyListener escucharTeclado= new KeyListener() {
            @Override
            public void keyTyped(KeyEvent arg0) {
                ;
            }

            @Override
            public void keyPressed(KeyEvent e) {
                System.out.println("Tecla: "+ e.getKeyChar()+"\n");
                
                char letra = e.getKeyChar();
                if(letra=='p'){
                    System.out.println(e.getKeyChar()+" de Pausa\n");
                    mTimer.stop();
                }
                if(letra=='c'){
                    System.out.println(e.getKeyChar()+" de Continuar\n");
                    mTimer.start();
                }
                /*if(letra=='i'){
                    System.out.println(e.getKeyChar()+" de Interrupción\n");
                }
                if(letra=='e'){
                    System.out.println(e.getKeyChar()+" de Error\n");
                    String operacion= String.valueOf(procesos.get(it).ImprimirNum1()) + String.valueOf(procesos.get(it).ImprimirOperacion())
                            + String.valueOf(procesos.get(it).ImprimirNum2());
                    Object[] ob2 = new Object[4];
                    ob2[0]= procesos.get(it).ImprimirId();
                    ob2[1]= operacion;
                    ob2[2]= "ERROR";
                    ob2[3]= String.valueOf((it/3)+1);
                    model2.addRow(ob2);
                    tblResultados.setModel(model2);//AGREGAR PROCESO TERMINADO
                    model.removeRow(0);//ELIMINAR OBJETO QUE DIO ERROR
                    it++;
                    //txtInstrucciones.cut();
                }*/
            }

            @Override
            public void keyReleased(KeyEvent arg0) {
                ;
            }
        };
        if(txtInstrucciones.getText().equals("e")){//ACABAR PROCESO POR ERROR
            String operacion= String.valueOf(procesos.get(it).ImprimirNum1()) + String.valueOf(procesos.get(it).ImprimirOperacion())
                            + String.valueOf(procesos.get(it).ImprimirNum2());
            Object[] ob2 = new Object[4];
            ob2[0]= procesos.get(it).ImprimirId();
            ob2[1]= operacion;
            ob2[2]= "ERROR";
            ob2[3]= String.valueOf((it/3)+1);
            model2.addRow(ob2);
            tblResultados.setModel(model2);//AGREGAR PROCESO TERMINADO
            model.removeRow(0);//ELIMINAR OBJETO QUE DIO ERROR
            it++;
            //txtTiempoTrans.setText(String.valueOf(procesos.get(it).ImprimirTtrans()));
            //txtTiempoRest.setText(String.valueOf(procesos.get(it).ImprimirTiempo()));
            contloc=0;
            txtInstrucciones.setText("");
        }
        
        if(txtInstrucciones.getText().equals("i")){//INTERRUPCIÓN
            int filas=model.getRowCount();
            System.out.println("INTERRPUCIÓN!!! Procesos: "+filas);
            //VARIABLES LOCALES
            String locId, locOp;
            int locNum1, locNum2, locTiempo, locTtrans;
            String locId2, locOp2;
            int locNum12, locNum22, locTiempo2, locTtrans2;
            String locId3, locOp3;
            int locNum13, locNum23, locTiempo3, locTtrans3;
            if(filas==1){//CASO DE QUE SOLO SEA UNO EN EL LOTE
                System.out.println("INTERRPUCIÓN 1 proceso!");
            }
            if(filas==2){//CASO DE QUE SEAN DOS EN EL LOTE
                System.out.println("INTERRPUCIÓN 2 procesos!");
                //ACTUALIZAR TABLA
                model.removeRow(0);
                model.addRow(new Object[]{procesos.get(it).ImprimirId(), procesos.get(it).ImprimirTiempo(), procesos.get(it).ImprimirTtrans()});
                tblLoteActual.setModel(model);
                //ACTUALIZAR IT
                locId = procesos.get(it).getID();
                locNum1 = procesos.get(it).getNumero1();
                locOp = procesos.get(it).getOperacion();
                locNum2 = procesos.get(it).getNumero2();
                locTiempo= procesos.get(it).getTiempo();
                locTtrans = procesos.get(it).getTtrans();
                System.out.println("LOCALES1: Id: "+locId+" "+locNum1+locOp+locNum2+" Tiempo: "+locTiempo+" TiempoTrans: "+locTtrans);
                locId2 = procesos.get(it+1).getID();
                locNum12 = procesos.get(it+1).getNumero1();
                locOp2 = procesos.get(it+1).getOperacion();
                locNum22 = procesos.get(it+1).getNumero2();
                locTiempo2= procesos.get(it+1).getTiempo();
                locTtrans2 = procesos.get(it+1).getTtrans();
                System.out.println("LOCALES2: Id: "+locId2+" "+locNum12+locOp2+locNum22+" Tiempo: "+locTiempo2+" TiempoTrans: "+locTtrans2);
                procesos.get(it).setID(locId2);
                procesos.get(it).setNumero1(locNum12);
                procesos.get(it).setOperacion(locOp2);
                procesos.get(it).setNumero2(locNum22);
                procesos.get(it).setTiempo(locTiempo2);
                procesos.get(it).setTtrans(locTtrans2);
                procesos.get(it+1).setID(locId);
                procesos.get(it+1).setNumero1(locNum1);
                procesos.get(it+1).setOperacion(locOp);
                procesos.get(it+1).setNumero2(locNum2);
                procesos.get(it+1).setTiempo(locTiempo);
                procesos.get(it+1).setTtrans(locTtrans);
                System.out.println("IT1: Id: "+procesos.get(it).ImprimirId()+" "+procesos.get(it).ImprimirNum1()+procesos.get(it).ImprimirOperacion()+procesos.get(it).ImprimirNum2()+" Tiempo: "+procesos.get(it).ImprimirTiempo()+" TiempoTrans: "+procesos.get(it).ImprimirTtrans());
                System.out.println("IT2: Id: "+procesos.get(it+1).ImprimirId()+" "+procesos.get(it+1).ImprimirNum1()+procesos.get(it+1).ImprimirOperacion()+procesos.get(it+1).ImprimirNum2()+" Tiempo: "+procesos.get(it+1).ImprimirTiempo()+" TiempoTrans: "+procesos.get(it+1).ImprimirTtrans());   
            }
            if(filas==3){//CASO DE QUE SEAN DOS EN EL LOTE
                //ACTUALIZAR TABLA
                model.removeRow(0);
                model.addRow(new Object[]{procesos.get(it).ImprimirId(), procesos.get(it).ImprimirTiempo(), procesos.get(it).ImprimirTtrans()});
                tblLoteActual.setModel(model);
                //ACTUALIZAR IT
                locId = procesos.get(it).getID();
                locNum1 = procesos.get(it).getNumero1();
                locOp = procesos.get(it).getOperacion();
                locNum2 = procesos.get(it).getNumero2();
                locTiempo= procesos.get(it).getTiempo();
                locTtrans = procesos.get(it).getTtrans();
                System.out.println("LOCALES1: Id: "+locId+" "+locNum1+locOp+locNum2+" Tiempo: "+locTiempo+" TiempoTrans: "+locTtrans);
                locId2 = procesos.get(it+1).getID();
                locNum12 = procesos.get(it+1).getNumero1();
                locOp2 = procesos.get(it+1).getOperacion();
                locNum22 = procesos.get(it+1).getNumero2();
                locTiempo2= procesos.get(it+1).getTiempo();
                locTtrans2 = procesos.get(it+1).getTtrans();
                System.out.println("LOCALES2: Id: "+locId2+" "+locNum12+locOp2+locNum22+" Tiempo: "+locTiempo2+" TiempoTrans: "+locTtrans2);
                locId3 = procesos.get(it+2).getID();
                locNum13 = procesos.get(it+2).getNumero1();
                locOp3 = procesos.get(it+2).getOperacion();
                locNum23 = procesos.get(it+2).getNumero2();
                locTiempo3= procesos.get(it+2).getTiempo();
                locTtrans3 = procesos.get(it+2).getTtrans();
                System.out.println("LOCALES3: Id: "+locId2+" "+locNum12+locOp2+locNum22+" Tiempo: "+locTiempo2+" TiempoTrans: "+locTtrans2);
                procesos.get(it).setID(locId2);
                procesos.get(it).setNumero1(locNum12);
                procesos.get(it).setOperacion(locOp2);
                procesos.get(it).setNumero2(locNum22);
                procesos.get(it).setTiempo(locTiempo2);
                procesos.get(it).setTtrans(locTtrans2);
                procesos.get(it+1).setID(locId3);
                procesos.get(it+1).setNumero1(locNum13);
                procesos.get(it+1).setOperacion(locOp3);
                procesos.get(it+1).setNumero2(locNum23);
                procesos.get(it+1).setTiempo(locTiempo3);
                procesos.get(it+1).setTtrans(locTtrans3);
                procesos.get(it+2).setID(locId);
                procesos.get(it+2).setNumero1(locNum1);
                procesos.get(it+2).setOperacion(locOp);
                procesos.get(it+2).setNumero2(locNum2);
                procesos.get(it+2).setTiempo(locTiempo);
                procesos.get(it+2).setTtrans(locTtrans);
                System.out.println("IT1: Id: "+procesos.get(it).ImprimirId()+" "+procesos.get(it).ImprimirNum1()+procesos.get(it).ImprimirOperacion()+procesos.get(it).ImprimirNum2()+" Tiempo: "+procesos.get(it).ImprimirTiempo()+" TiempoTrans: "+procesos.get(it).ImprimirTtrans());
                System.out.println("IT2: Id: "+procesos.get(it+1).ImprimirId()+" "+procesos.get(it+1).ImprimirNum1()+procesos.get(it+1).ImprimirOperacion()+procesos.get(it+1).ImprimirNum2()+" Tiempo: "+procesos.get(it+1).ImprimirTiempo()+" TiempoTrans: "+procesos.get(it+1).ImprimirTtrans());   
                System.out.println("IT1: Id: "+procesos.get(it+2).ImprimirId()+" "+procesos.get(it+2).ImprimirNum1()+procesos.get(it+2).ImprimirOperacion()+procesos.get(it+2).ImprimirNum2()+" Tiempo: "+procesos.get(it+2).ImprimirTiempo()+" TiempoTrans: "+procesos.get(it+2).ImprimirTtrans());            
            }
            txtInstrucciones.setText("");
        }
        
        txtInstrucciones.addKeyListener(escucharTeclado);
        //txtInstrucciones.setText("");
        //setFocusable(true);
        //panelVisualizar.addKeyListener(this);
        System.out.println("Cronometro " + contloc);
        //LOTES RESTANTES
        int lotrest = (procesos.size() - it) / 3;
        txtLotesRest.setText(String.valueOf(lotrest));
        
        //DATOS TABLA 1
        int cont=0;
        if(model.getRowCount()==0){
            if(it%3 == 0){
                System.out.println(it + " % " + 3 + " = " + (it%3));
                for(int j=it; cont<3; j++){
                    if(j==procesos.size()){
                        //System.out.println("BREAK " + procesos.size());
                        break;
                    }
                    //System.out.println("FOR1 " + j + " " + procesos.get(j).ImprimirNombre());
                    model.addRow(new Object[]{procesos.get(j).ImprimirId(), procesos.get(j).ImprimirTiempo(), "0"});
                    tblLoteActual.setModel(model);
                    cont=cont+1;
                }
            }
        }
        
        
        
        //PONER DATOS DE LA OPERACION ACTUAL
        txtIDProc.setText(procesos.get(it).ImprimirId());
        //txtNombreProc.setText(procesos.get(it).ImprimirNombre());
        String operacion = String.valueOf(procesos.get(it).ImprimirNum1()) + procesos.get(it).ImprimirOperacion()
                    + String.valueOf(procesos.get(it).ImprimirNum2());
        txtOperacionProc.setText(operacion);
            
        
            
            
        //TABLA DE RESULTADOS
        double resultado=0;
        if(String.valueOf(procesos.get(it).getTiempo()-1).equals(txtTiempoTrans.getText())){
            if(procesos.get(it).operacion.equals("+")){
                resultado = procesos.get(it).getNumero1() + procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("-")){
                resultado = procesos.get(it).getNumero1() - procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("/")){
                resultado = procesos.get(it).getNumero1() / procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("*")){
                resultado = procesos.get(it).getNumero1() * procesos.get(it).getNumero2();
            }
            else if(procesos.get(it).operacion.equals("potencia")){
                resultado = Math.pow(procesos.get(it).getNumero1(), procesos.get(it).getNumero2());
            }
            else if(procesos.get(it).operacion.equals("residuo")){
                resultado = procesos.get(it).getNumero1() % procesos.get(it).getNumero2();
            }
            
            Object[] ob2 = new Object[4];
            ob2[0]= procesos.get(it).ImprimirId();
            ob2[1]= operacion;
            ob2[2]= String.valueOf(resultado);
            ob2[3]= String.valueOf((it/3)+1);
            model2.addRow(ob2);
            tblResultados.setModel(model2);
        }
        
        //TIEMPO TRANSCURRIDO    
        contloc = contloc + 1;
        procesos.get(it).setTtrans(contloc);
        txtTiempoTrans.setText(String.valueOf(procesos.get(it).getTtrans()));
        //TIEMPO RESTANTE
        temprest = procesos.get(it).tiempo - procesos.get(it).getTtrans();
        txtTiempoRest.setText(String.valueOf(temprest));
        //Contador Global
        contglobal = contglobal + 1;
        txtContGlobal.setText(String.valueOf(contglobal));
        
        
        
        //SIGUIENTE OBJETO
        if(procesos.get(it).tiempo==contloc){
            model.removeRow(0);//eliminar el objeto terminado de la tabla
            it=it+1;
            txtTiempoTrans.setText(String.valueOf(procesos.get(it).ImprimirTtrans()));
            txtTiempoRest.setText(String.valueOf(procesos.get(it).ImprimirTiempo()));
            contloc=0;
        }
        
        if(model2.getRowCount() == procesos.size()){//FIN DEL PROGRAMA
            mTimer.stop();//PARA EL CRONOMETRO
        }
    }
    
    private void txtLotesRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLotesRestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLotesRestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainProgram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptCant_InDt;
    private javax.swing.JButton btnComenzar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panelIngresar;
    private javax.swing.JPanel panelVisualizar;
    private javax.swing.JSpinner spinCantProc;
    private javax.swing.JTable tblLoteActual;
    private javax.swing.JTable tblResultados;
    private javax.swing.JTextField txtContGlobal;
    private javax.swing.JTextField txtIDProc;
    private javax.swing.JTextField txtInstrucciones;
    private javax.swing.JTextField txtLotesRest;
    private javax.swing.JTextField txtOperacionProc;
    private javax.swing.JTextField txtTiempoRest;
    private javax.swing.JTextField txtTiempoTrans;
    // End of variables declaration//GEN-END:variables


}
